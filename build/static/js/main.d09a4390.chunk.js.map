{"version":3,"sources":["components/NavMessage/index.js","components/Nav/index.js","components/Header/index.js","components/Container/index.js","components/ClickItem/index.js","components/Footer/index.js","components/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["NavMessage","state","message","animating","renderMessage","score","topScore","newState","this","setState","setTimeout","className","Component","Nav","props","href","Header","Container","children","ClickItem","role","aria-label","onClick","handleClick","id","style","backgroundImage","image","shake","Footer","Game","data","handleCorrectGuess","newData","newScore","newTopScore","shuffleData","handleIncorrectGuess","resetData","map","item","clicked","i","length","j","Math","floor","random","temp","handleItemClick","guessedCorrectly","newItem","key","React","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d09a4390.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./style.css\";\n\n// NavMessage renders an li tag containing an message for the user\n\nclass NavMessage extends Component {\n  state = {\n    message: \"\",\n    animating: false\n  };\n\n  componentWillReceiveProps({ score, topScore }) {\n    const newState = { animating: true };\n    if (score === 0 && topScore === 0) {\n      newState.message = \"\";\n    } else if (score === 0 && topScore > 0) {\n      newState.message = \"incorrect\";\n    } else {\n      newState.message = \"correct\";\n    }\n    this.setState(newState, () =>\n      setTimeout(() => this.setState({ animating: false }), 500)\n    );\n  }\n\n  renderMessage = () => {\n    switch (this.state.message) {\n      case \"correct\":\n        return \"You guessed correctly!!\";\n      case \"incorrect\":\n        return \"You guessed incorrectly\";\n      default:\n        return \"Click an image to begin!!\";\n    }\n  };\n\n  render() {\n    return (\n      <li className={this.state.animating ? this.state.message : \"\"}>\n        {this.renderMessage()}\n      </li>\n    );\n  }\n}\n\nexport default NavMessage;\n","import React from \"react\";\nimport NavMessage from \"../NavMessage\";\nimport \"./style.css\";\n\n//Component for the Navbar\n\nconst Nav = props => (\n  <nav className=\"navbar\">\n    <ul>\n      <li className=\"brand\">\n        <a href=\"/\">Clicky Game</a>\n      </li>\n      <NavMessage score={props.score} topScore={props.topScore} />\n      <li>\n        Score: {props.score} | Top Score: {props.topScore}\n      </li>\n    </ul>\n  </nav>\n);\n\nexport default Nav;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Header() {\n  return (\n    <header className=\"header\">\n      <h1>Clicky Game!</h1>\n      <h2>\n        Click on an image to earn points, but don't click on any image more than\n        once!\n      </h2>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Container(props) {\n  return <main className=\"container\">{props.children}</main>;\n}\n\nexport default Container;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction ClickItem(props) {\n  return (\n    <div\n      role=\"img\"\n      aria-label=\"click item\"\n      onClick={() => props.handleClick(props.id)}\n      style={{ backgroundImage: `url(\"${props.image}\")` }}\n      className={`click-item ${props.shake ? \"shake\" : \"\"}`}\n    />\n  );\n}\nexport default ClickItem;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <footer className=\"footer\">\n      <div className=\"bottom\">Clicky Game! 2019</div>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport Nav from \"../Nav\";\nimport Header from \"../Header\";\nimport Container from \"../Container\";\nimport ClickItem from \"../ClickItem\";\nimport Footer from \"../Footer\";\nimport data from \"../../data.json\";\n\nclass Game extends React.Component {\n  state = {\n    data,\n    score: 0,\n    topScore: 0\n  };\n\n  componentDidMount() {\n    this.setState({ data: this.shuffleData(this.state.data) });\n  }\n\n  handleCorrectGuess = newData => {\n    const { topScore, score } = this.state;\n    const newScore = score + 1;\n    const newTopScore = newScore > topScore ? newScore : topScore;\n    this.setState({\n      data: this.shuffleData(newData),\n      score: newScore,\n      topScore: newTopScore\n    });\n  };\n\n  handleIncorrectGuess = data => {\n    this.setState({\n      data: this.resetData(data),\n      score: 0\n    });\n  };\n\n  resetData = data => {\n    const resetData = data.map(item => ({ ...item, clicked: false }));\n    return this.shuffleData(resetData);\n  };\n\n  shuffleData = data => {\n    let i = data.length - 1;\n    while (i > 0) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = data[i];\n      data[i] = data[j];\n      data[j] = temp;\n      i--;\n    }\n    return data;\n  };\n\n  handleItemClick = id => {\n    let guessedCorrectly = false;\n    const newData = this.state.data.map(item => {\n      const newItem = { ...item };\n      if (newItem.id === id) {\n        if (!newItem.clicked) {\n          newItem.clicked = true;\n          guessedCorrectly = true;\n        }\n      }\n      return newItem;\n    });\n    guessedCorrectly\n      ? this.handleCorrectGuess(newData)\n      : this.handleIncorrectGuess(newData);\n  };\n\n  render() {\n    return (\n      <div>\n        <Nav score={this.state.score} topScore={this.state.topScore} />\n        <Header />\n        <Container>\n          {this.state.data.map(item => {\n            return (\n              <ClickItem\n                key={item.id}\n                id={item.id}\n                shake={!this.state.score && this.state.topScore}\n                handleClick={this.handleItemClick}\n                image={item.image}\n              />\n            );\n          })}\n        </Container>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from \"react\";\nimport Game from \"./components/Game\";\n\nfunction App() {\n  return <Game />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}